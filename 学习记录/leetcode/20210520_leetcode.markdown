今天做了一道 leetcode 的每日一题 [692. 前 K 个高频单词](https://leetcode-cn.com/problems/top-k-frequent-words/)
题目本身并不难，如果会 python 中 sorted 的使用，这道题十分简单。

我的思路是建立一个字典，然后把每个 value 排个序，直接输出前 k 个 key 值即可。但是这样就忽略了当 value 值相同时，key 值也需要排序。查看题解，发现了 sorted 的使用比想象中更加强大。在此总结一下。

1. **sorted()** 函数对所有可迭代对象都可以进行排序操作，可迭代对象包括列表、字典等。
   sorted 可以用于对集合进行排序（这里集合是对可迭代对象的一个统称，他们可以是列表、字典、set、甚至是字符串），它的功能非常强大
2. **sort 与 sorted()** 的区别：
   sort 仅用于 list，sorted 可以对所有可迭代对象进行排序操作。
   list 的 sort 方法返回的是对已经存在的列表进行操作，无返回值；而 sorted()方法返回的是一个新的 list，而不是在原来的基础上进行的操作。
3. 语法

```python
sorted(iterable, cmp = None, key = None, reverse = False)
```

4. 参数说明：
   iterable -- 可迭代对象。
   cmp -- 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回 1，小于则返回-1，等于则返回 0。
   key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
   reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。
5. 返回值
   返回重新排序的列表。

6. 实例
   以下实例展示了 sorted 的基本使用方法：

```
>>>a = [5,7,6,3,4,1,2]
>>> b = sorted(a)       # 保留原列表
>>> a
[5, 7, 6, 3, 4, 1, 2]
>>> b
[1, 2, 3, 4, 5, 6, 7]

>>> L=[('b',2),('a',1),('c',3),('d',4)]
>>> sorted(L, cmp=lambda x,y:cmp(x[1],y[1]))   # 利用cmp函数
[('a', 1), ('b', 2), ('c', 3), ('d', 4)]
>>> sorted(L, key=lambda x:x[1])               # 利用key
[('a', 1), ('b', 2), ('c', 3), ('d', 4)]


>>> students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]
>>> sorted(students, key=lambda s: s[2])            # 按年龄排序
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

>>> sorted(students, key=lambda s: s[2], reverse=True)       # 按降序
[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]
```

![Alt](https://img2018.cnblogs.com/blog/1008977/201911/1008977-20191105215544399-1428225593.png)
